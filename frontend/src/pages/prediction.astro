---
import Layout from "../layouts/Layout.astro";

const PUBLIC_BACKEND_URL = import.meta.env.PUBLIC_BACKEND_URL;
---

<Layout title="AWS Amplify + Elasticbeanstalk + Sagemaker demo">
  <main>
    <h1>
      Amplify + Elasticbeanstalk <span class="text-gradient">Demo</span>
    </h1>
    <div class="flex justify-center">
      <div
        class="bg-gray-100 dark:bg-gray-800 shadow-lg rounded-lg p-8 max-w-lg w-full"
      >
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-center">
            Salary Prediction Result
          </h2>
        </div>

        <!-- Displaying Input Parameters -->
        <div class="mb-12">
          <h3 class="text-lg font-semibold">Input Parameters:</h3>
          <ul class="list-disc list-inside">
            <li>Working Year: <span id="workingYear">5</span></li>
            <li>Experience Level: <span id="experienceLevel">EN</span></li>
            <li>Employment Type: <span id="employmentType">PT</span></li>
            <li>Remote Ratio: <span id="remoteRatio">50%</span></li>
            <li>
              Employment Residence: <span id="employmentResidence">BF</span>
            </li>
            <li>Company Location: <span id="companyLocation">BL</span></li>
            <li>Company Size: <span id="companySize">S</span></li>
          </ul>
        </div>

        <div class="mb-12" id="predictionResult">
        <!-- Displaying Predicted Salary -->
        <div class="mb-12" >
          <h3 class="text-lg font-semibold">Estimated Salary:</h3>
          <p class="text-3xl font-bold text-green-500">
            $<span id="estimatedSalary">45,000</span>
          </p>
        </div>

        <!-- Graph for Salary Range -->
        
          <h3 class="text-lg font-semibold mb-4">Salary Range:</h3>
          <div class="relative h-4 bg-gray-200 dark:bg-gray-700 rounded">
            <div
              id="minSalary"
              class="absolute left-0 h-full bg-blue-500 rounded-l"
              style="width: 30%;"
            >
            </div>
            <div
              id="maxSalary"
              class="absolute right-0 h-full bg-blue-500 rounded-r"
              style="width: 50%;"
            >
            </div>
          </div>
          <div class="flex justify-between text-sm mt-2">
            <span id="minSalaryLabel">$40,000</span>
            <span id="maxSalaryLabel">$60,000</span>
          </div>
        </div>

        <!-- Button to Request Another Simulation -->
        <div class="mt-8 flex justify-center">
          <a
            href="/form"
            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            Request Another Simulation
          </a>
        </div>
      </div>
    </div>
  </main>
  <script define:vars={{ PUBLIC_BACKEND_URL: PUBLIC_BACKEND_URL }}>
    // Function to update the page with the actual data
    function updateSalaryPrediction(data) {
      document.getElementById("workingYear").textContent = data.working_year;
      document.getElementById("experienceLevel").textContent =
        data.experience_level;
      document.getElementById("employmentType").textContent =
        data.employment_type;
      document.getElementById("remoteRatio").textContent =
        data.remote_ratio + "%";
      document.getElementById("employmentResidence").textContent =
        data.employment_residence;
      document.getElementById("companyLocation").textContent =
        data.company_location;
      document.getElementById("companySize").textContent = data.company_size;

      document.getElementById("estimatedSalary").textContent =
        data.estimated_salary.toLocaleString();

      // Update the salary range graph
      const minPercent = (data.min_salary / data.max_salary) * 100;
      document.getElementById("minSalary").style.width = minPercent + "%";
      document.getElementById("maxSalary").style.width = 100 - minPercent + "%";

      document.getElementById("minSalaryLabel").textContent =
        `$${data.min_salary.toLocaleString()}`;
      document.getElementById("maxSalaryLabel").textContent =
        `$${data.max_salary.toLocaleString()}`;
    }

    function getPredictionIdFromUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get("prediction");
    }

    async function fetchPredictionStatus(predictionId) {
      const response = await fetch(
        `${PUBLIC_BACKEND_URL}/api/v1/prediction/status/${predictionId}`,
        {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        },
      );
      return response.json();
    }

    async function fetchPredictionData(predictionId) {
      const response = await fetch(
        `${PUBLIC_BACKEND_URL}/api/v1/prediction/${predictionId}`,
        {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        },
      );
      return response.json();
    }

    async function updatePageWithPrediction(predictionId, backup, timer) {
      const predictionData = await fetchPredictionData(predictionId);
      updateSalaryPrediction(predictionData);
      document.getElementById("predictionResult").innerHTML = backup;
      clearInterval(timer);
  }

    // Client-side code to run after the page loads
    window.addEventListener("DOMContentLoaded", () => {
      const predictionId = getPredictionIdFromUrl();
      if (predictionId) {
        console.log("Prediction id", predictionId);
        const backup = document.getElementById("predictionResult").innerHTML;
        let attempts = 0;
        const timer = setInterval(async () => {
          attempts++;
          try {
            const statusResponse = await fetchPredictionStatus(predictionId);

            if (statusResponse.status === "success") {
              await updatePageWithPrediction(predictionId, backup, timer); // Stop the timer when successful
              
            }
          } catch (error) {
            console.error(
              `Error fetching prediction status (attempts = ${attempts}):`,
              error,
            );
          }
          if (attempts > 10) {
            clearInterval(timer); // Stop the timer after 10 attempts
            // Handle error - display an error message to the user
            document.getElementById("predictionResult").innerHTML =
              '<p class="text-red-500">Prediction request timed out. Please try again later.</p>';
          }
        }, 600); // Ping every 600ms
        document.getElementById("predictionResult").innerHTML =
          '<p class="text-gray-500">Waiting for the results to be predicted...</p>';      
      }
    });

    // Example data, replace this with the actual API call data
    const exampleData = {
      working_year: "...",
      experience_level: "...",
      employment_type: "...",
      remote_ratio: "...",
      employment_residence: "...",
      company_location: "...",
      company_size: "...",
      estimated_salary: "...",
      min_salary: "...",
      max_salary: "...",
    };

    // Call the update function with example data
    updateSalaryPrediction(exampleData);


</script>
</Layout>

<style>
  h2 {
    @apply font-semibold text-2xl;
  }
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
</style>
