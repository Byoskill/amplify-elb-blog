---
import Layout from "../layouts/Layout.astro";

const PUBLIC_BACKEND_URL = import.meta.env.PUBLIC_BACKEND_URL;
---

<Layout title="AWS Amplify + Elasticbeanstalk + Sagemaker demo">
  <main>
    <h1>
      Amplify + Elasticbeanstalk <span class="text-gradient">Demo</span>
    </h1>
    <div class="flex justify-center">
      <div
        class="bg-gray-100 dark:bg-gray-800 shadow-lg rounded-lg p-8 max-w-2xl w-full mb-12"
        id="resultCard"
      >
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-center">
            Salary Prediction Result
          </h2>
        </div>
        <div class="flex justify-between items-center mb-6">
        <!-- Displaying Input Parameters -->
        <div class="mb-12 hidden w-full col-1" id="input">
          <h3 class="text-lg font-semibold">Input Parameters:</h3>
          <ul class="list-disc list-inside">
            <li>Working Year: <span id="workingYear">5</span></li>
            <li>Experience Level: <span id="experienceLevel">EN</span></li>
            <li>Employment Type: <span id="employmentType">PT</span></li>
            <li>Remote Ratio: <span id="remoteRatio">50%</span></li>
            <li>
              Employment Residence: <span id="employmentResidence">BF</span>
            </li>
            <li>
              Job Title: <span id="jobTitle"></span>
            </li>
            <li>Company Location: <span id="companyLocation">BL</span></li>
            <li>Company Size: <span id="companySize">S</span></li>
          </ul>
        </div>
        <div class="w-full col-2" id="result">
          <div id="salaryWidget" class="hidden py-6">          <!-- Displaying Predicted Salary -->
            <h3 class="text-lg font-semibold">Estimated Salary:</h3>
            <p class="text-3xl font-bold text-green-500" >
              $ <span id="estimatedSalary">-</span>
            </p>
          </div>

        
          <div class="mb-12" id="uploadingMessage">Loading...</div>
          <div class="mb-12 hidden" id="predictionResult">
          <!-- Graph for Salary Range -->
          
            <h3 class="text-lg font-semibold mb-4">Salary Range:</h3>
            <div class="relative h-4 bg-gray-400 dark:bg-gray-700 rounded">
              <div
                id="minSalary"
                class="absolute left-0 h-full bg-blue-500 rounded-l"
                style="width: 30%;"
              >
              </div>
              <div
                id="maxSalary"
                class="absolute right-0 h-full bg-blue-500 rounded-r"
                style="width: 50%;"
              >
              </div>
            </div>
            <div class="flex justify-between text-sm mt-2">
              <span id="minSalaryLabel">$0</span>
              <span id="maxSalaryLabel">$1</span>
            </div>
          </div>
        </div>
      </div>
        <!-- Button to Request Another Simulation -->
        <div class="mt-8 flex justify-center">
          <a
            href="/form"
            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            Request for another Simulation
          </a>
        </div>
      </div>
    </div>
  </main>
  <script define:vars={{ PUBLIC_BACKEND_URL: PUBLIC_BACKEND_URL }}>

    function findElement(itemId) {
      try {
        const elt = document.getElementById(itemId)
        if (!elt) {
          console.error(`HTML with id ${itemId} could not be found`)
        }
        return elt
      } catch(err) {
        console.error(`HTML with id ${itemId} could not be found`, err)
      }
    }
    function toggleClass(elt, cssClass) {
      // Toggle CSS class ( remove, add)
      elt.classList.toggle(cssClass);
    }

    
    // Function to update the page with the actual data
    function updateSalaryPrediction(data) {
      if (!data ||!data.input) return ;
      toggleClass(findElement("predictionResult"), "hidden")
      toggleClass(findElement("uploadingMessage"), "hidden")
      toggleClass(findElement("input"), "hidden")
      toggleClass(findElement("salaryWidget"), "hidden")
      findElement("workingYear").textContent = data.input.work_year;
      findElement("experienceLevel").textContent = data.input.experience_level;
      findElement("employmentType").textContent = data.input.employment_type;
      findElement("remoteRatio").textContent = data.input.remote_ratio + "%";
      findElement("employmentResidence").textContent = data.input.employee_residence;
      findElement("jobTitle").textContent = data.input.job_tile;
      findElement("companyLocation").textContent = data.input.company_location;
      findElement("companySize").textContent = data.input.company_size;
      findElement("estimatedSalary").textContent = Math.round(data.salary);

      // Update the salary range graph
      const salary = 50000 // data.salary
      const avg = (data.min_salary + data.max_salary) / 2      
      let minPercent = Math.round(Math.abs(salary - avg)  / Math.abs(data.max_salary - data.min_salary ) * 100 ) ;
            // 5
      console.log(minPercent)


      findElement("minSalary").style.width = minPercent- 5 + "%";
      findElement("maxSalary").style.width = 95 - minPercent + "%";
      findElement("minSalaryLabel").textContent = `$${Math.round(data.min_salary).toLocaleString()}`;
      findElement("maxSalaryLabel").textContent = `$${Math.round(data.max_salary).toLocaleString()}`;
    }

    function getPredictionIdFromUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get("prediction");
    }

    async function fetchPredictionStatus(predictionId) {
      const response = await fetch(
        `${PUBLIC_BACKEND_URL}/api/v1/prediction/status/${predictionId}`,
        {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        },
      );
      return response.json();
    }

    async function fetchPredictionData(predictionId) {
      const response = await fetch(
        `${PUBLIC_BACKEND_URL}/api/v1/prediction/${predictionId}`,
        {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        },
      );
      return response.json();
    }

    async function updatePageWithPrediction(predictionId, backup, timer) {
      const predictionData = await fetchPredictionData(predictionId);
      updateSalaryPrediction(predictionData);
      clearInterval(timer);
  }

    // Client-side code to run after the page loads
    window.addEventListener("DOMContentLoaded", () => {
      const predictionId = getPredictionIdFromUrl();
      if (predictionId) {
        console.log("Prediction id", predictionId);
        const backup = document.getElementById("uploadingMessage").innerHTML;
        let attempts = 0;
        const timer = setInterval(async () => {
          attempts++;
          try {
            const statusResponse = await fetchPredictionStatus(predictionId);

            if (statusResponse.status === "ready") {
              await updatePageWithPrediction(predictionId, backup, timer); // Stop the timer when successful
              clearInterval(timer); // Stop the timer after 10 attempts              
            }
          } catch (error) {
            console.error(
              `Error fetching prediction status (attempts = ${attempts}):`,
              error,
            );
          }
          if (attempts > 10) {
            clearInterval(timer); // Stop the timer after 10 attempts
            // Handle error - display an error message to the user
            document.getElementById("uploadingMessage").innerHTML =
              '<p class="text-red-500">Prediction request timed out. Please try again later.</p>';
          }
        }, 600); // Ping every 600ms
        document.getElementById("uploadingMessage").innerHTML =
          '<p class="text-gray-500">Waiting for the results to be predicted...</p>';      
      }
    });

    // Example data, replace this with the actual API call data
    const exampleData = {
      work_year: "...",
      experience_level: "...",
      employment_type: "...",
      remote_ratio: "...",
      employee_residence: "...",
      company_location: "...",
      company_size: "...",
      estimated_salary: "...",
      min_salary: "...",
      max_salary: "...",
    };

    // Call the update function with example data
    updateSalaryPrediction(exampleData);


</script>
</Layout>

<style>
  h2 {
    @apply font-semibold text-2xl;
  }
  main {
    @apply container mx-auto
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
</style>
